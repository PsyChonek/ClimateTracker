/**
 * Climate API
 * API for the Climate project.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllReadingsGet200ResponseInner from '../model/AllReadingsGet200ResponseInner';
import NewReadingPost200Response from '../model/NewReadingPost200Response';
import NewReadingPostRequest from '../model/NewReadingPostRequest';

/**
* Readings service.
* @module api/ReadingsApi
* @version 0.1.0
*/
export default class ReadingsApi {

    /**
    * Constructs a new ReadingsApi. 
    * @alias module:api/ReadingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allReadingsGet operation.
     * @callback module:api/ReadingsApi~allReadingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AllReadingsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all readings
     * Retrieve all readings within a specific date range.
     * @param {Object} opts Optional parameters
     * @param {Date} [fromDate] Start date for the range.
     * @param {Date} [toDate] End date for the range.
     * @param {module:api/ReadingsApi~allReadingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AllReadingsGet200ResponseInner>}
     */
    allReadingsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AllReadingsGet200ResponseInner];
      return this.apiClient.callApi(
        '/allReadings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newReadingPost operation.
     * @callback module:api/ReadingsApi~newReadingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewReadingPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new reading
     * Endpoint to add a new sensor reading to the database.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewReadingPostRequest} [body] 
     * @param {module:api/ReadingsApi~newReadingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewReadingPost200Response}
     */
    newReadingPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = NewReadingPost200Response;
      return this.apiClient.callApi(
        '/newReading', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
