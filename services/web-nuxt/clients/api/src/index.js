/**
 * Climate API
 * API for the Climate project.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AddSensorPost200Response from './model/AddSensorPost200Response';
import AddSensorPostRequest from './model/AddSensorPostRequest';
import AllReadingsGet200ResponseInner from './model/AllReadingsGet200ResponseInner';
import AllSensorsGet200ResponseInner from './model/AllSensorsGet200ResponseInner';
import NewReadingPost200Response from './model/NewReadingPost200Response';
import NewReadingPostRequest from './model/NewReadingPostRequest';
import SensorPatch200Response from './model/SensorPatch200Response';
import SensorPatchRequest from './model/SensorPatchRequest';
import ReadingsApi from './api/ReadingsApi';
import SensorsApi from './api/SensorsApi';


/**
* API for the Climate project..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ClimateApi = require('index'); // See note below*.
* var xxxSvc = new ClimateApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ClimateApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ClimateApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ClimateApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AddSensorPost200Response model constructor.
     * @property {module:model/AddSensorPost200Response}
     */
    AddSensorPost200Response,

    /**
     * The AddSensorPostRequest model constructor.
     * @property {module:model/AddSensorPostRequest}
     */
    AddSensorPostRequest,

    /**
     * The AllReadingsGet200ResponseInner model constructor.
     * @property {module:model/AllReadingsGet200ResponseInner}
     */
    AllReadingsGet200ResponseInner,

    /**
     * The AllSensorsGet200ResponseInner model constructor.
     * @property {module:model/AllSensorsGet200ResponseInner}
     */
    AllSensorsGet200ResponseInner,

    /**
     * The NewReadingPost200Response model constructor.
     * @property {module:model/NewReadingPost200Response}
     */
    NewReadingPost200Response,

    /**
     * The NewReadingPostRequest model constructor.
     * @property {module:model/NewReadingPostRequest}
     */
    NewReadingPostRequest,

    /**
     * The SensorPatch200Response model constructor.
     * @property {module:model/SensorPatch200Response}
     */
    SensorPatch200Response,

    /**
     * The SensorPatchRequest model constructor.
     * @property {module:model/SensorPatchRequest}
     */
    SensorPatchRequest,

    /**
    * The ReadingsApi service constructor.
    * @property {module:api/ReadingsApi}
    */
    ReadingsApi,

    /**
    * The SensorsApi service constructor.
    * @property {module:api/SensorsApi}
    */
    SensorsApi
};
