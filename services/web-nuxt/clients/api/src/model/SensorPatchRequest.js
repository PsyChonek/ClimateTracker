/**
 * Climate API
 * API for the Climate project.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SensorPatchRequest model module.
 * @module model/SensorPatchRequest
 * @version 0.1.0
 */
class SensorPatchRequest {
    /**
     * Constructs a new <code>SensorPatchRequest</code>.
     * @alias module:model/SensorPatchRequest
     * @param sensorID {String} Unique ID of the sensor.
     */
    constructor(sensorID) { 
        
        SensorPatchRequest.initialize(this, sensorID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sensorID) { 
        obj['sensorID'] = sensorID;
    }

    /**
     * Constructs a <code>SensorPatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SensorPatchRequest} obj Optional instance to populate.
     * @return {module:model/SensorPatchRequest} The populated <code>SensorPatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SensorPatchRequest();

            if (data.hasOwnProperty('sensorID')) {
                obj['sensorID'] = ApiClient.convertToType(data['sensorID'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('temperatureOffset')) {
                obj['temperatureOffset'] = ApiClient.convertToType(data['temperatureOffset'], 'Number');
            }
            if (data.hasOwnProperty('humidityOffset')) {
                obj['humidityOffset'] = ApiClient.convertToType(data['humidityOffset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SensorPatchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SensorPatchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SensorPatchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sensorID'] && !(typeof data['sensorID'] === 'string' || data['sensorID'] instanceof String)) {
            throw new Error("Expected the field `sensorID` to be a primitive type in the JSON string but got " + data['sensorID']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}

SensorPatchRequest.RequiredProperties = ["sensorID"];

/**
 * Unique ID of the sensor.
 * @member {String} sensorID
 */
SensorPatchRequest.prototype['sensorID'] = undefined;

/**
 * Display name for the sensor.
 * @member {String} displayName
 */
SensorPatchRequest.prototype['displayName'] = undefined;

/**
 * Temperature offset value.
 * @member {Number} temperatureOffset
 */
SensorPatchRequest.prototype['temperatureOffset'] = undefined;

/**
 * Humidity offset value.
 * @member {Number} humidityOffset
 */
SensorPatchRequest.prototype['humidityOffset'] = undefined;






export default SensorPatchRequest;

