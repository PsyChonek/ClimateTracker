/**
 * Climate API
 * API for the Climate project.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AllSensorsGet200ResponseInner model module.
 * @module model/AllSensorsGet200ResponseInner
 * @version 0.1.0
 */
class AllSensorsGet200ResponseInner {
    /**
     * Constructs a new <code>AllSensorsGet200ResponseInner</code>.
     * @alias module:model/AllSensorsGet200ResponseInner
     */
    constructor() { 
        
        AllSensorsGet200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AllSensorsGet200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllSensorsGet200ResponseInner} obj Optional instance to populate.
     * @return {module:model/AllSensorsGet200ResponseInner} The populated <code>AllSensorsGet200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllSensorsGet200ResponseInner();

            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('sensorID')) {
                obj['sensorID'] = ApiClient.convertToType(data['sensorID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllSensorsGet200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllSensorsGet200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['sensorID'] && !(typeof data['sensorID'] === 'string' || data['sensorID'] instanceof String)) {
            throw new Error("Expected the field `sensorID` to be a primitive type in the JSON string but got " + data['sensorID']);
        }

        return true;
    }


}



/**
 * @member {String} ip
 */
AllSensorsGet200ResponseInner.prototype['ip'] = undefined;

/**
 * @member {Number} port
 */
AllSensorsGet200ResponseInner.prototype['port'] = undefined;

/**
 * @member {String} sensorID
 */
AllSensorsGet200ResponseInner.prototype['sensorID'] = undefined;






export default AllSensorsGet200ResponseInner;

