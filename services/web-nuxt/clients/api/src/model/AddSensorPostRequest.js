/**
 * Climate API
 * API for the Climate project.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddSensorPostRequest model module.
 * @module model/AddSensorPostRequest
 * @version 0.1.0
 */
class AddSensorPostRequest {
    /**
     * Constructs a new <code>AddSensorPostRequest</code>.
     * @alias module:model/AddSensorPostRequest
     * @param ip {String} IP address of the sensor.
     * @param port {Number} Port number of the sensor.
     */
    constructor(ip, port) { 
        
        AddSensorPostRequest.initialize(this, ip, port);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ip, port) { 
        obj['ip'] = ip;
        obj['port'] = port;
    }

    /**
     * Constructs a <code>AddSensorPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddSensorPostRequest} obj Optional instance to populate.
     * @return {module:model/AddSensorPostRequest} The populated <code>AddSensorPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddSensorPostRequest();

            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddSensorPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddSensorPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddSensorPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }

        return true;
    }


}

AddSensorPostRequest.RequiredProperties = ["ip", "port"];

/**
 * IP address of the sensor.
 * @member {String} ip
 */
AddSensorPostRequest.prototype['ip'] = undefined;

/**
 * Port number of the sensor.
 * @member {Number} port
 */
AddSensorPostRequest.prototype['port'] = undefined;






export default AddSensorPostRequest;

