/**
 * Climate API
 * API for the Climate project.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewReadingPostRequest model module.
 * @module model/NewReadingPostRequest
 * @version 0.1.0
 */
class NewReadingPostRequest {
    /**
     * Constructs a new <code>NewReadingPostRequest</code>.
     * @alias module:model/NewReadingPostRequest
     * @param sensorID {String} Unique ID of the sensor.
     * @param temperature {Number} Temperature reading in Celsius.
     * @param humidity {Number} Humidity reading in percentage.
     */
    constructor(sensorID, temperature, humidity) { 
        
        NewReadingPostRequest.initialize(this, sensorID, temperature, humidity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sensorID, temperature, humidity) { 
        obj['sensorID'] = sensorID;
        obj['temperature'] = temperature;
        obj['humidity'] = humidity;
    }

    /**
     * Constructs a <code>NewReadingPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewReadingPostRequest} obj Optional instance to populate.
     * @return {module:model/NewReadingPostRequest} The populated <code>NewReadingPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewReadingPostRequest();

            if (data.hasOwnProperty('sensorID')) {
                obj['sensorID'] = ApiClient.convertToType(data['sensorID'], 'String');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('humidity')) {
                obj['humidity'] = ApiClient.convertToType(data['humidity'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewReadingPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewReadingPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewReadingPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sensorID'] && !(typeof data['sensorID'] === 'string' || data['sensorID'] instanceof String)) {
            throw new Error("Expected the field `sensorID` to be a primitive type in the JSON string but got " + data['sensorID']);
        }

        return true;
    }


}

NewReadingPostRequest.RequiredProperties = ["sensorID", "temperature", "humidity"];

/**
 * Unique ID of the sensor.
 * @member {String} sensorID
 */
NewReadingPostRequest.prototype['sensorID'] = undefined;

/**
 * Temperature reading in Celsius.
 * @member {Number} temperature
 */
NewReadingPostRequest.prototype['temperature'] = undefined;

/**
 * Humidity reading in percentage.
 * @member {Number} humidity
 */
NewReadingPostRequest.prototype['humidity'] = undefined;

/**
 * Timestamp of the reading.
 * @member {Date} timestamp
 */
NewReadingPostRequest.prototype['timestamp'] = undefined;






export default NewReadingPostRequest;

